%%%%%%%%%%%%%%%%%%%%%%%%%% Speed controller
module cruiseController:


input accel: float, speed: float, brake: float;
input on, off, set, resume, quickDecel, quickAccel;

output cruiseState: integer;
% 1-CruiseOff
% 2-CruiseOn
% 3-CruiseStndby
% 4-CruiseDisable

output throttleCmd, cruiseSpeed: float;

run cruiseFSM [
	signal on/on;
	signal off/off;
	signal resume/resume;
	signal speed/speed;
	signal accel/accel;
	signal brake/brake;

	signal cruiseState/cruiseState]
%{
||
run SpeedFSM [
	signal quickAccel/sQuickAccel;
	signal quickDecel/sQuickDecel;
	signal set/sSet;
	signal cruiseState/cruiseState;
	signal speed/sSpeed;

	signal cruiseSpeed/sCruiseSpeed]
}%

end module


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
module cruiseFSM:

input on, off, resume;
input speed:float, accel:float, brake:float;

output cruiseState: integer; %// initial state is off
% 1-CruiseOff
% 2-CruiseOn
% 3-CruiseStndby
% 4-CruiseDisable

%// business logic
constant PedalsMin = 3.00f : float;
constant SpeedMin = 30.00f : float;
constant SpeedMax = 150.00f	: float; 

var state:= 0: integer in 

loop
	%await tick;
	%%// CruiseOff %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	if(state = 1) then

		% check for the on signal
		present on then
			state:= 2; %// go to ON
		end present;


	%%// CruiseOn %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	elsif(state = 2) then
		
		%// if off go to OFF
		present off then 
			state:= 1; 
		end present;

		%// if brakepressed go to STANDBY
		if(?brake > PedalsMin) then
			state:=3; 

		end if;

		%// go to disable if accelpressed or speed outside limits
		if(?accel > PedalsMin or ?speed < SpeedMin or SpeedMax > ?speed) then
			state := 4;
		end if;


	%%// CruiseStndby %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	elsif(state = 3) then

		%// if off go to OFF
		present off then
			state:=1;
		end present;

		%// if resume pressed then
		present resume then
			%// if accel not pressed and speed within limits, ON
			if (SpeedMin <= ?speed) and (?speed <= SpeedMax) and (?accel < PedalsMin) then
				state:= 2; % go to ON
			end if;

			%// if speed outside limits and accel pressed, DISABLE
			if (SpeedMin < ?speed or SpeedMax > ?speed) and (?accel >= PedalsMin) then
				state:= 4;
			end if;

		end present;


	%%// CruiseDisable %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	elsif(state = 4) then

		%// iff off pressed, go to OFF
		present off then
			state:= 1;
		end present;


		%// if brakepressed, go to STANDBY
		%if (?brake >= PedalsMin) then %// honestly might not even need this because standby or disable are very similar
		%	state:= 3; % go to STNDBY
		%end if;

		%// if accel not pressed and speed in limits go to ON
		if (?accel < PedalsMin) and (SpeedMin <= ?speed) and (?speed <= SpeedMax) then
			state := 2;
		end if;

	end if;

	emit cruiseState(state);

end loop;
end var;
end module



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
module SpeedFSM:
% interface declarations
input sQuickAccel, sQuickDecel,sSet;
input sCruiseState: integer;
input sSpeed: float;
 
% outputs
output sCruiseSpeed: float; % may need to use an int instead
% 1-CruiseOff
% 2-CruiseOn
% 3-CruiseStndby
% 4-CruiseDisable

% business logic
constant SpeedMin= 30.00f : float;
constant SpeedMax= 150.00f : float; 
constant SpeedInc=10.00f : float;


% var incSpeed := ?sSpeed: float in %no semi colon needed
var internalCruiseSpeed:= ?sSpeed: float in

loop
	pause;

	% if on, check for disable
	if (?sCruiseState = 1 or ?sCruiseState = 3) then

		% if not disable, then do something
		if not (?sCruiseState = 4)  then

			% if this is the first time On is pressed or if set is pressed
			present sSet then
				% set the speed
				internalCruiseSpeed:= ?sSpeed;
			end present;

			if(((pre(?sCruiseState) = 1) and (?sCruiseState = 2))) then

				% set the speed
				internalCruiseSpeed:= ?sSpeed;

			end if;

			%incrementing speed if sQuickAccel is pressed AND the new speed will be less than the max
			present sQuickAccel then
				if ((internalCruiseSpeed <= SpeedMax)) then
					internalCruiseSpeed := internalCruiseSpeed + SpeedInc;
				end if;
			end present;

			% calc the decrememnted speed
			%incSpeed := ?sSpeed - SpeedInc;

			% decrement speed if sQuickDecel is pressed AND the new speed will be more than the min
			present sQuickDecel then
			if ((internalCruiseSpeed >= SpeedMin)) then
					internalCruiseSpeed := internalCruiseSpeed - SpeedInc;
				end if;
			end present;

			% check if the speed is outside the limits, and set them to thresholds if so
			if(internalCruiseSpeed > SpeedMax) then
				internalCruiseSpeed:= SpeedMax;
			end if;
		
			if(internalCruiseSpeed < SpeedMin) then
				internalCruiseSpeed:= SpeedMin;
			end if;


			emit sCruiseSpeed(internalCruiseSpeed);


		end if;
	end if;
	pause;
end loop
end var;
%end var;
end module