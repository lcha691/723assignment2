%%%%%%%%%%%%%%%%%%%%%%%%%% Speed controller
module SpeedFSM:

% interface declarations
input sQuickAccel, sQuickDecel,sSet;
input sCruiseState: integer;
input sSpeed: float;
 
% outputs
output sCruiseSpeed: float; % may need to use an int instead
% 1-CruiseOff
% 2-CruiseOn
% 3-CruiseStndby
% 4-CruiseDisable

% business logic
constant SpeedMin= 30.00f : float;
constant SpeedMax= 150.00f : float; 
constant SpeedInc=10.00f : float;

%#define PedalsMin 3.00
%#define SpeedMin 30.00
%#define SpeedMax 150.00
%#define SpeedInc 10.00
%#define Zero 0.00

var incSpeed := ?sSpeed: float in %no semi colon needed
var internalCruiseSpeed:= ?sSpeed: float in

loop
	pause;


	% if on, check for disable
	if (?sCruiseState = 1 or ?sCruiseState = 3) then

		% if not disable, then do something
		if not (?sCruiseState = 4)  then

			% if this is the first time On is pressed or if set is pressed
			present sSet then
				% set the speed
				internalCruiseSpeed:= ?sSpeed;
			end present;
			if(((pre(?sCruiseState) = 1) and (?sCruiseState = 2))) then

				% set the speed
				internalCruiseSpeed:= ?sSpeed;

			end if;

			% check if the speed is outside the limits, and set them to thresholds if so
			if(?sSpeed > SpeedMax) then
				internalCruiseSpeed:= SpeedMax;
			end if;
		
			if(?sSpeed < SpeedMin) then
				internalCruiseSpeed:= SpeedMin;
			end if;


			% calc the incremented speed
			incSpeed := ?sSpeed + SpeedInc;

			% incrementing speed if sQuickAccel is pressed AND the new speed will be less than the max
			present sQuickAccel then
				if ((incSpeed <= SpeedMax)) then
					internalCruiseSpeed := incSpeed;
				end if;
			end present;

			% calc the decrememnted speed
			incSpeed := ?sSpeed - SpeedInc;

			% decrement speed if sQuickDecel is pressed AND the new speed will be more than the min
			present sQuickDecel then
				if ((incSpeed >= SpeedMin)) then
					internalCruiseSpeed := incSpeed;
				end if;
			end present;
			emit sCruiseSpeed(internalCruiseSpeed);


		end if;
	end if;
	pause;
end loop
end var;
end var;
end module